.base_variables: &base_variables
  STACK_NAME: "change-aggregation-bulletin"
  STACK_LOCATION: "./"
  REGION: "eu-west-1"
  AWS_DEFAULT_REGION: $REGION
  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  NOTIFY_CHANNEL: "sre_engineroom"
  SAM_OVERRIDES: "pipeline/${ENV}.parameters"
  FASTLY: "false"
  CUSTOM_DEPLOY_TAGS: "OwnerContact=$NOTIFY_CHANNEL"

.dev_variables: &dev_variables
  <<: *base_variables
  AWS_ACCOUNT_NAME: dundev
  DOMAIN: dundev.io
  ENV: dev

.branch_variables: &branch_variables
  <<: *dev_variables
  SAM_OVERRIDES: "pipeline/branch.parameters"

.qa_variables: &qa_variables
  <<: *base_variables
  AWS_ACCOUNT_NAME: dunqa
  DOMAIN: dunqa.io
  ENV: qa

.preprod_variables: &preprod_variables
  <<: *base_variables
  AWS_ACCOUNT_NAME: dunpreprod
  DOMAIN: dunpreprod.io
  ENV: preprod

.prod_variables: &prod_variables
  <<: *base_variables
  AWS_ACCOUNT_NAME: dunprod
  DOMAIN: dunelm.com
  ENV: prod
  SEND_CHANNEL_SUCCESS_NOTIFICATION: "true"
  SEND_CAB_NOTIFICATION: "true"

.monitoring_variables: &monitoring_variables
  BACKEND_NAMESPACE: "dunprod"
  MONITORING_DIR: "monitoring"
  TF_VAR_repo: $CI_PROJECT_URL
  TF_VAR_service_name: $CI_PROJECT_NAME
  TF_VAR_env: $BACKEND_NAMESPACE

.python_job:
  before_script:
    - poetry config --local virtualenvs.in-project true
    - poetry run python --version
  cache:
    key: ${CI_COMMIT_BRANCH}
    paths:
      - .cache/pip
      - .venv/
    policy: pull

.branch_cfn_job:
  tags:
    - branch
    - cloudformation
  only:
    - branches
  except:
    - main

.main_cfn_job:
  tags:
    - master
    - cloudformation
  only:
    - main

.e2e_base:
  extends: .python_job
  script:
    - assume-role
    - export FRONTEND_DOMAIN="changes.${DOMAIN%.*}.io"
    - export STACK_NAME=$(get-stack-name)
    - |
      export $(aws cloudformation describe-stacks \
      --stack-name $STACK_NAME \
      --query 'Stacks[].Outputs[].[OutputKey,OutputValue]' \
      --output text | sed -e 's/[[:space:]]/=/g' | xargs -d '\n')
    - echo "Running e2e tests against CAB domain $ServiceBaseUrl and TEST table $TestTableName"
    - make etest
  artifacts:
    when: always
    reports:
      junit: reports/e2e_test_report.xml

.smoke_test_base:
  extends: .python_job
  script:
    - assume-role
    - export LATEST_COMMIT_REF="$CI_COMMIT_SHORT_SHA"
    - export PIPELINE_ID="$CI_PIPELINE_ID"
    - export REPO_ID="$CI_PROJECT_ID"
    - export STACK_NAME=$(get-stack-name)
    - |
      export $(aws cloudformation describe-stacks \
      --stack-name $STACK_NAME \
      --query 'Stacks[].Outputs[].[OutputKey,OutputValue]' \
      --output text | sed -e 's/[[:space:]]/=/g' | xargs -d '\n')
    - echo "Running smoke tests against CAB domain $ServiceBaseUrl"
    - make smoke_test
  artifacts:
    when: always
    reports:
      junit: reports/smoke_test_report.xml

.get_param_script: &get_param_script
  - |
    get_param() {
      aws ssm get-parameter --region "$REGION" --name "/CAB/RDS/$1" --query Parameter.Value --output text
    }

.migration:
  extends:
    - .main_cfn_job
    - .python_job
  script:
    - assume-role
    - *get_param_script
    - export DATABASE_HOST="$(get_param "host_name")"
    - export DATABASE_NAME="$(get_param "db_name")"
    - export DATABASE_USER="$(get_param "migration/username")"
    - export DATABASE_PASSWORD="$(get_param "migration/password")"
    - make migrate
    - unassume-role
  variables:
    DATABASE_CREDENTIALS_SECRET_NAME: "rds-db-credentials/change-aggregation-rds/cab_migration_user"
  except:
    - schedules

.wake_rds:
  stage: test
  extends:
    - .python_job
  script:
    - assume-role
    - poetry run python scripts/rds/start_instance.py dundev

variables:
  <<: *base_variables

stages:
  - install
  - test
  - migrate dev
  - deploy dev
  - test dev
  - stop branch stack
  - migrate qa
  - deploy qa
  - test qa
  - migrate preprod
  - deploy preprod
  - test preprod
  - migrate prod
  - deploy prod
  - test prod
  - monitoring
  - notify result

include:
  - project: "dunelm/platform-engineering/sam-shared-pipeline"
    file:
      - "pipeline/modules/notify/pipeline-failure.yml"
      - "pipeline/modules/deploy/sam-deploy.yml"
      - "pipeline/modules/deploy/stop-review-app.yml"
      - "pipeline/modules/monitoring/plan_apply.yml"
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: "Workflows/Branch-Pipelines.gitlab-ci.yml"

default:
  image: registry.gitlab.com/dunelm/platform-engineering/sam-shared-pipeline:$SAM_SHARED_PIPELINE_IMAGE_TAG
  tags:
    - dunelm

install:
  stage: install
  extends: .python_job
  script:
    - make install
  only:
    - branches
  cache:
    policy: pull-push
  retry: 1

unit test:
  stage: test
  extends: .python_job
  script:
    - make utest
  artifacts:
    when: always
    paths:
      - reports/
    reports:
      junit: reports/unit_test_report.xml
      coverage_report:
        coverage_format: cobertura
        path: reports/coverage.xml
  only:
    - branches

# once ruff vs flake8 has been evaluated revert this to `script: make lint`
lint:
  stage: test
  extends: .python_job
  script: 
    - make black
    - make isort
    - make cfn-lint
    - make newline-check
  only:
    - branches
  retry: 1

lint ruff:
  stage: test
  extends: .python_job
  script: make ruff
  only:
    - branches
  retry: 1

lint flake8:
  stage: test
  extends: .python_job
  script: make flake8
  only:
    - branches
  retry: 1

safety:
  stage: test
  extends: .python_job
  script:
    - make safety
  only:
    - branches
  retry: 1

bandit:
  stage: test
  extends: .python_job
  script: make bandit
  only:
    - branches
  retry: 1

check migrations:
  stage: test
  extends: .python_job
  script: make check_migrations
  only:
    - branches
  except:
    - main
  retry: 1

build:
  services:
    - docker:dind
  stage: test
  script:
    - make build
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375/
  artifacts:
    when: on_success
    expire_in: 1 day
    paths:
      - .aws-sam/
  retry: 1

wake rds branch:
  extends:
    - .wake_rds
    - .branch_cfn_job
  variables:
    AWS_ACCOUNT_NAME: dundev

wake rds main:
  extends:
    - .wake_rds
    - .main_cfn_job
  except:
    - schedules
  parallel:
    matrix:
      - AWS_ACCOUNT_NAME:
          - dundev
          - dunqa
          - dunpreprod

deploy branch:
  stage: deploy dev
  extends:
    - .deploy_stage
    - .branch_cfn_job
  variables:
    <<: *branch_variables
  environment:
    name: $CI_COMMIT_REF_SLUG/$STACK_NAME
    deployment_tier: development
    url: https://$REVIEW_URL
    auto_stop_in: 1 week
    on_stop: stop branch stack

e2e branch:
  stage: test dev
  extends:
    - .e2e_base
    - .branch_cfn_job
  variables:
    <<: *branch_variables

stop branch stack:
  stage: stop branch stack
  extends:
    - .branch_cfn_job
    - .stop_review
  environment:
    name: $CI_COMMIT_REF_SLUG/$STACK_NAME
    action: stop
  variables:
    <<: *branch_variables
  needs:
    - job: deploy branch
  when: manual

migrate dev:
  stage: migrate dev
  extends:
    - .migration
  variables:
    <<: *dev_variables

deploy dev:
  stage: deploy dev
  extends:
    - .deploy_stage
    - .main_cfn_job
  variables:
    <<: *dev_variables
  retry: 1

e2e dev:
  stage: test dev
  extends:
    - .e2e_base
    - .main_cfn_job
  variables:
    <<: *dev_variables

smoke test dev:
  stage: test dev
  extends:
    - .smoke_test_base
    - .main_cfn_job
  variables:
    <<: *dev_variables

migrate qa:
  stage: migrate qa
  extends:
    - .migration
  variables:
    <<: *qa_variables

deploy qa:
  stage: deploy qa
  extends:
    - .deploy_stage
    - .main_cfn_job
  variables:
    <<: *qa_variables
  retry: 1

e2e qa:
  stage: test qa
  extends:
    - .e2e_base
    - .main_cfn_job
  variables:
    <<: *qa_variables

smoke test qa:
  stage: test qa
  extends:
    - .smoke_test_base
    - .main_cfn_job
  variables:
    <<: *qa_variables

migrate preprod:
  stage: migrate preprod
  extends:
    - .migration
  variables:
    <<: *preprod_variables

deploy preprod:
  stage: deploy preprod
  extends:
    - .deploy_stage
    - .main_cfn_job
  variables:
    <<: *preprod_variables
  except:
    - schedules

e2e preprod:
  stage: test preprod
  extends:
    - .e2e_base
    - .main_cfn_job
  variables:
    <<: *preprod_variables
  except:
    - schedules

smoke test preprod:
  stage: test preprod
  extends:
    - .smoke_test_base
    - .main_cfn_job
  variables:
    <<: *preprod_variables
  except:
    - schedules

migrate prod:
  stage: migrate prod
  extends:
    - .migration
  variables:
    <<: *prod_variables

deploy prod:
  stage: deploy prod
  extends:
    - .deploy_stage
    - .main_cfn_job
  variables:
    <<: *prod_variables
  except:
    - schedules

smoke test prod:
  stage: test prod
  extends:
    - .smoke_test_base
    - .main_cfn_job
  variables:
    <<: *prod_variables
  except:
    - schedules

plan monitors:branch:
  stage: test
  extends: .plan_monitors:branch
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_PROTECTED != "true" || $CI_COMMIT_BRANCH !~ /^(master|main)$/'
      when: always
  variables:
    <<: *monitoring_variables

plan monitors:main:
  stage: test
  extends: .plan_monitors:main
  variables:
    <<: *monitoring_variables

apply monitors:main:
  extends: .apply_monitors:main
  variables:
    <<: *monitoring_variables
